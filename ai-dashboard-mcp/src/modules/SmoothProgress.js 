// SmoothProgress.js 

class MusicProgressTracker {
  /**
   * @param {Object} options - Config options
   * @param {number} options.updatePeriod - update period in ms (default 1000)
   * @param {number} options.resetInterval - how often to reset counter (default 10)
   * @param {number} options.safetyRange - max allowed diff before reset (default 2)
   * @param {number} options.adjustment - adjustment multiplier (default 1)
   * @param {() => number} getDuration - function returning total duration (seconds)
   * @param {() => number} getPosition - function returning current position (seconds)
   * @param {() => boolean} isPlaying - function returning true if player is playing
   */
  constructor(
    {
      updatePeriod = 1000,
      resetInterval = 10,
      safetyRange = 2,
      adjustment = 1,
    } = {},
    getDuration,
    getPosition,
    isPlaying
  ) {
    this.updatePeriod = updatePeriod;
    this.resetInterval = resetInterval;
    this.safetyRange = safetyRange;
    this.adjustment = adjustment;

    if (typeof getDuration !== "function" || typeof getPosition !== "function" || typeof isPlaying !== "function") {
      throw new Error("getDuration, getPosition, and isPlaying functions are required");
    }

    this.getDuration = getDuration;
    this.getPosition = getPosition;
    this.isPlaying = isPlaying;

    this.counter = -1;
    this.fake = 0;
  }

  update() {
    const total = this.getDuration();
    const real = this.getPosition();
    const playing = this.isPlaying() ? 1 : 0;
    const stopped = !this.isPlaying() ? 1 : 0;

    this.counter = (this.counter + 1) % (this.resetInterval * (1000 / this.updatePeriod));

    if (stopped === 1) {
      this.fake = 0;
    } else if (this.counter === 0 || Math.abs(this.fake - real) > this.safetyRange) {
      this.fake = real;
    } else {
      this.fake += playing * (this.updatePeriod / 1000) * this.adjustment;
    }

    if (total === 0) return 0; // avoid divide by zero

    return this.fake / total;
  }
}

// Example usage:
/*
const tracker = new MusicProgressTracker(
  {
    updatePeriod: 1000,
    resetInterval: 10,
    safetyRange: 2,
    adjustment: 1,
  },
  () => 240, // total duration in seconds
  () => currentPositionInSeconds, // get current play position
  () => isPlayerPlaying // boolean
);

setInterval(() => {
  const progress = tracker.update();
  console.log("Progress (0..1):", progress);
}, 1000);
*/

export default MusicProgressTracker;
